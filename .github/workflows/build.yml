name: buildtestdeploy

on:
  push:
    branches: [ main ]

env:
  DOCKER_USER: "${{ secrets.DOCKER_USER }}"
  DOCKER_TOKEN: "${{ secrets.DOCKER_TOKEN }}"
  KUBECONFIG: "${{ secrets.KUBECONFIG }}"

jobs:
  buildtestdeploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

#      - name: Run test case
#        run: |
#          pwd
#          ls -lrt
#          pip install -r requirements.txt
#          python3 app.py &
#          python3 test_app.py
#          coverage run --source=app -m unittest discover
#          coverage report -m
#
#      - name: Build the docker image
#        run: |
#          docker build -t equal-expert:v1.0.0 .
#          docker images | grep equal-expert
#
#      - name: Scan vulnrability of image
#        run: |
#          sudo apt-get install wget apt-transport-https gnupg lsb-release
#          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
#          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
#          sudo apt-get update
#          sudo apt-get install trivy
#          trivy image equal-expert:v1.0.0
#
#      - name: Tag and Push
#        run: |
#          docker login -u="${DOCKER_USER}" -p="${DOCKER_TOKEN}"
#          docker tag equal-expert:v1.0.0 chandrakadevops/equal-export:v1.0.0
#          docker push chandrakadevops/equal-export:v1.0.0

      - name: test kubernetes cluster
        run: |
          sudo apt install -y apt-transport-https ca-certificates curl
          curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
          echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
          sudo apt update
          sudo apt install -y kubelet kubeadm kubectl
          sudo apt-mark hold kubelet kubeadm kubectl
          mkdir -p $HOME/.kube
          cp ${KUBECONFIG} $HOME/.kube/config
          sudo chown \((id-u):\)(id -g) $HOME/.kube/config
          kubectl get all -A
            
          
      



